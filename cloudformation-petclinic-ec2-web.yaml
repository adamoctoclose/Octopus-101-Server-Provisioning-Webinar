AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create
  an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based
  on the region in which the stack is run. This example creates an EC2 security
  group for the instance to give you SSH access. **WARNING** This template
  creates an Amazon EC2 instance. You will be billed for the AWS resources used
  if you create a stack from this template.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: '#{Project.AWS.SSHKeyPair.Name}'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  ImageAmi:
    Description: The AMI you want to build
    Type: String
    Default: '#{Project.AWS.EC2.AMI}'
    ConstraintDescription: must be a valid AMI for this region
  WebInstanceName:
    Type: String
    Default: '#{Project.AWS.EC2.Web.Stack.Name}'
  SubnetIdParameter:
    Type: String
    Default: '#{Project.AWS.Subnet}'
  SecurityGroupIdParameter:
    Type: String
    MinLength: "1"
    Default: '#{Project.AWS.SecurityGroup}'
  IamInstanceProfile:
    Type: String
    Default: 
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    m1.large:
      Arch: HVM64
    m1.xlarge:
      Arch: HVM64
    m2.xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: HVM64
    c1.xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    eu-west-1:
      HVM64: ami-08935252a36e25f85
      HVMG2: ami-0d5299b1c6112c3c7
    eu-west-2:
      HVM64: ami-01419b804382064e4
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-0dd7e7ed60da8fb83
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-0cfbf4f6db41068ac
      HVMG2: ami-0aa1822e3eb913a11
    eu-north-1:
      HVM64: ami-86fe70f8
      HVMG2: ami-32d55b4c
Resources:
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
           - 
              !Ref SecurityGroupIdParameter
          SubnetId: !Ref SubnetIdParameter
      KeyName: !Ref KeyName
      ImageId: !Ref ImageAmi 
      IamInstanceProfile: !Ref IamInstanceProfile
      Tags:
        -
          Key: Name
          Value: !Ref WebInstanceName
      UserData:
        Fn::Base64: 
          !Sub |
          #!/bin/bash -x
          serverUrl="#{Global.Octopus.ServerUrl}"   # The url of your Octous server
          publicHostName=$(curl s http://169.254.169.254/latest/meta-data/public-hostname)
          space="#{Global.Octopus.Space}"
          thumbprint="#{Global.Octopus.Thumbprint}"       # The thumbprint of your Octopus Server
          apiKey="#{Global.Octopus.api.Key}"           # An Octopus Server api key with permission to add machines
          name="#{Project.AWS.EC2.Web.Stack.Name}"     # The name of the Tentacle at is will appear in the Octopus portal
          environment="#{Octopus.Environment.Name}"  # The environment to register the Tentacle in
          role="petclinic-web"   # The role to assign to the Tentacle
          configFilePath="/etc/octopus/default/tentacle-default.config"
          applicationPath="/home/Octopus/Applications/"
          
          # Install PowerShell
          
          
          wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb
          dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y apt-transport-https
          sudo apt-get install -y aspnetcore-runtime-3.0
          sudo apt-get install -y powershell                          
                                
          # Install Octopus Tentacle 
          
          sudo apt-key adv --fetch-keys https://apt.octopus.com/public.key
          sudo add-apt-repository "deb https://apt.octopus.com/ stretch main"
          sudo apt-get update
          sudo apt-get install -y tentacle
          
          ufw allow 8081/tcp
          ufw allow 10933/tcp

          /opt/octopus/tentacle/Tentacle create-instance --config "$configFilePath"
          /opt/octopus/tentacle/Tentacle new-certificate --if-blank
          /opt/octopus/tentacle/Tentacle configure --port 10933 --noListen False --reset-trust --app "$applicationPath"
          /opt/octopus/tentacle/Tentacle configure --trust $thumbprint
          echo "Registering the Tentacle $name with server $serverUrl in environment $environment with role $role"
          /opt/octopus/tentacle/Tentacle register-with --server "$serverUrl" --publicHostName "$publicHostName" --apiKey "$apiKey" --space "$space" --name "$name" --env "$environment" --role "$role"
          /opt/octopus/tentacle/Tentacle service --install --start
          
          

          
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt 
      - EC2Instance
      - AvailabilityZone
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt 
      - EC2Instance
      - PublicDnsName
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt 
      - EC2Instance
      - PublicIp
